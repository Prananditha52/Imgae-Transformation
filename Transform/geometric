from .interpolation import interpolation
import numpy as np
import math
class Geometric:
    def __init__(self):
        pass

    def forward_rotate(self, image, theta):
        """Computes the forward rotated image by and angle theta
                image: input image
                theta: angle to rotate the image by (in radians)
                return the rotated image"""
        height = image.shape[0]
        width = image.shape[1]
        #get the resized image
        top_left_x= 0 * np.cos(theta) - 0 * np.sin(theta)
        top_left_y = 0 * np.sin(theta) + 0 * np.cos(theta)
        top_right_x = 0 * np.cos(theta) - width * np.sin(theta)
        top_right_y = 0 * np.sin(theta) + width * np.cos(theta)
        bottom_left_x = height * np.cos(theta) - 0 * np.sin(theta)
        bottom_left_y = height * np.sin(theta) + 0 * np.cos(theta)
        bottom_right_x = height * np.cos(theta) - width * np.sin(theta)
        bottom_right_y = height * np.sin(theta) + width * np.cos(theta)
        min_x = min(top_left_x, top_right_x, bottom_left_x, bottom_right_x)
        max_x = max(top_left_x, top_right_x, bottom_left_x, bottom_right_x)
        min_y = min(top_left_y, top_right_y, bottom_left_y, bottom_right_y)
        max_y = max(top_left_y, top_right_y, bottom_left_y, bottom_right_y)
        rows = math.floor(max_x - min_x)
        cols = math.floor(max_y - min_y)
        Output = np.zeros((cols + 1, rows + 1))
        for i in range(0, height):
            for j in range(0, width):
                new_i = i * np.cos(theta) - j * np.sin(theta)
                new_j = i * np.sin(theta) + j * np.cos(theta)
                new_x = math.floor(new_i - min_x)
                new_y = math.floor(new_j - min_y)
                Output[new_x][new_y] = image[i][j]
        return Output

    def reverse_rotation(self, rotated_image, theta, origin, original_shape):
        """Computes the reverse rotated image by and angle theta
                rotated_image: the rotated image from previous step
                theta: angle to rotate the image by (in radians)
                Origin: origin of the original image with respect to the rotated image
                Original shape: Shape of the orginal image
                return the original image"""
        height1 = rotated_image.shape[0]
        width1 = rotated_image.shape[1]
        height2 = original_shape[0]
        width2 = original_shape[1]
        out_rev = np.zeros((height2, width2))

        for i in range(0, height1):
            for j in range(0, width1):
                new_x1 = (i - origin[0])
                new_y1 = (j - origin[1])
                x_i = math.floor(new_x1 * np.cos(theta) + new_y1 * np.sin(theta))
                y_j = math.floor(new_y1 * np.cos(theta) - new_x1 * np.sin(theta))
                if x_i in range(0, 255) and y_j in range(0, 255) and rotated_image[i][j] > 0:
                    out_rev[x_i][y_j] = rotated_image[i][j]

        return out_rev

    def rotate(self, image, theta, interpolation_type):
        """Computes the reverse rotated image by and angle theta
                image: the input image
                theta: angle to rotate the image by (in radians)
                interpolation_type: type of interpolation to use (nearest_neighbor, bilinear)
                return the original image"""
        height = image.shape[0]
        width = image.shape[1]
        top_left_x = 0 * np.cos(theta) - 0 * np.sin(theta)
        top_left_y = 0 * np.sin(theta) + 0 * np.cos(theta)
        top_right_x = 0 * np.cos(theta) - width * np.sin(theta)
        top_right_y = 0 * np.sin(theta) + width * np.cos(theta)
        bottom_left_x = height * np.cos(theta) - 0 * np.sin(theta)
        bottom_left_y = height * np.sin(theta) + 0 * np.cos(theta)
        bottom_right_x = height * np.cos(theta) - width * np.sin(theta)
        bottom_right_y = height * np.sin(theta) + width * np.cos(theta)
        min_x = min(top_left_x, top_right_x, bottom_left_x, bottom_right_x)
        max_x = max(top_left_x, top_right_x, bottom_left_x, bottom_right_x)
        min_y = min(top_left_y, top_right_y, bottom_left_y, bottom_right_y)
        max_y = max(top_left_y, top_right_y, bottom_left_y, bottom_right_y)
        origin = [-min_x, -min_y]
        rows = math.floor(max_x - min_x)
        cols = math.floor(max_y - min_y)
        r_image = np.zeros((cols + 1, rows + 1))
        for i in range(0, height):
            for j in range(0, width):
                new_x = i * np.cos(theta) - j * np.sin(theta)
                new_y = i * np.sin(theta) + j * np.cos(theta)
                new_x = math.floor(new_x - min_x)
                new_y = math.floor(new_y - min_y)
                r_image[new_x][new_y] = image[i][j]
            
        heightr = r_image.shape[0]
        widthr = r_image.shape[1]
        for i in range(heightr):
            for j in range(widthr):
                x1 = (i - origin[0])
                y1 = (j - origin[1])
                rotated_i = (x1 * np.cos(theta) + y1 * np.sin(theta))
                rotated_j = (y1 * np.cos(theta) - x1 * np.sin(theta))
                if interpolation_type == 'nearest_neighbor':
                    if 0<rotated_i<height-1:
                        if 0<rotated_j<width-1:
                            i_nn = int(round(rotated_i))
                            j_nn = int(round(rotated_j))
                            r_image[i, j] = image[i_nn, j_nn]
                elif interpolation_type == "bilinear":
#                     intp=interpolation.interpolation
                    i_nn = rotated_i
                    j_nn = rotated_j
                    i_floor=math.floor(i_nn)
                    i_ceil = math.ceil(i_nn)
                    j_floor=math.floor(j_nn)
                    j_ceil=math.ceil(j_nn)

                    if 0<i_floor<height and 0<i_ceil<height and 0<j_floor<width and 0<j_ceil<width:
                        p1=(i_floor,j_floor,image[i_floor][j_floor])
                        p2=(i_floor,j_ceil,image[i_floor][j_ceil])
                        p3=(i_ceil,j_floor,image[i_ceil,j_floor])
                        p4=(i_ceil,j_ceil,image[i_ceil][j_ceil])
                        unknown = (rotated_i, rotated_j)
                        k = interpolation.bilinear_interpolation(self,p1, p2, p3, p4, unknown)
                        r_image[i, j] = k
        return r_image
